{"version":3,"file":"js/206.0ed65817.js","mappings":"sJAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAA+B,GAAvBF,EAAIM,gBAAyBF,EAAG,cAAc,CAACA,EAAG,WAAW,CAACG,GAAG,CAAC,MAAQP,EAAIQ,qBAAqB,CAACR,EAAIS,GAAG,qCAAqCL,EAAG,WAAW,CAACG,GAAG,CAAC,MAAQP,EAAIU,OAAO,CAACV,EAAIS,GAAG,2BAAmCE,GAAZX,EAAIY,OAAmBR,EAAG,eAAe,CAACS,YAAY,UAAUb,EAAIc,GAAId,EAAS,OAAE,SAASe,GAAG,OAAOX,EAAG,oBAAoB,CAACY,IAAID,EAAEE,GAAGJ,YAAY,0DAA0DK,MAAM,CAAC,OAAS,IAAIX,GAAG,CAAC,MAAQ,SAASY,GAAQ,OAAOnB,EAAIoB,UAAUL,MAAM,CAACX,EAAG,IAAI,CAACS,YAAY,uBAAuB,CAACT,EAAG,IAAI,CAACJ,EAAIS,GAAGT,EAAIqB,GAAGN,EAAEO,WAAWlB,EAAG,QAAQ,CAACS,YAAY,QAAQ,CAACT,EAAG,IAAI,CAACJ,EAAIS,GAAG,YAAYT,EAAIqB,GAAG,IAAIE,KAAKR,EAAES,SAASC,kBAAkB,KAAKrB,EAAG,MAAMJ,EAAIS,GAAG,aAAaT,EAAIqB,GAAG,IAAIE,KAAKR,EAAEW,SAASD,uBAAuBrB,EAAG,WAAW,CAACc,MAAM,CAAC,KAAO,UAAU,QAAU,mBAAmBX,GAAG,CAAC,MAAQ,SAASY,GAAiC,OAAzBA,EAAOQ,kBAAyB3B,EAAI4B,KAAKb,EAAEE,OAAO,CAACb,EAAG,eAAe,GAAGA,EAAG,WAAW,CAACc,MAAM,CAAC,KAAO,UAAU,QAAU,mBAAmBX,GAAG,CAAC,MAAQ,SAASY,GAAiC,OAAzBA,EAAOQ,kBAAyB3B,EAAI6B,MAAMd,EAAEE,OAAO,CAACb,EAAG,iBAAiB,IAAI,MAAK,GAAGJ,EAAI8B,KAAK1B,EAAG,eAAe,GAAGJ,EAAI8B,MACxtCC,EAAkB,G,UC+BtB,GACAT,KAAAA,cACAU,WAAAA,CACA,8CAIAC,OAAAA,CAAAA,EAAAA,GACAC,OACA,OACAC,MAAAA,KAGAC,QAAAA,CACAhB,UAAAA,GACAiB,QAAAA,IAAAA,UAAAA,GACA,+BACA,aAEA7B,qBACA,2BACA,aAEAE,OACA,kDAEAmB,MAAAA,GACA,uDACA,OAIAS,UAAAA,UAAAA,UAAAA,GAAAA,MAAAA,WAGAC,EAAAA,UAAAA,mCAAAA,EAAAA,yCAAAA,cACA,WAGAA,EAAAA,UAAAA,sDAAAA,EAAAA,eAGAX,KAAAA,GACAY,OAAAA,KAAAA,EAAAA,UAAAA,UAMAC,MAAAA,CACA7B,SACA,mEAGA8B,SAAAA,CACA9B,SACA,sCAEAN,kBACA,iDC3FuQ,I,UCQnQqC,GAAY,OACd,EACA5C,EACAgC,GACA,EACA,KACA,KACA,MAIF,EAAeY,EAAiB,S,mBCnBhC,QACEP,QAAS,CACPQ,UAAUC,EAAOC,EAASC,EAAU,MAClC9C,KAAK+C,SAASC,MAAMH,EAAU,CAC5BD,MAAOA,EACPE,QAASA,EACTG,OAAO","sources":["webpack://agent/./src/views/BrainLoader.vue?7e74","webpack://agent/src/views/BrainLoader.vue","webpack://agent/./src/views/BrainLoader.vue?15f2","webpack://agent/./src/views/BrainLoader.vue","webpack://agent/./src/mixins/ToastMixin.js"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.showBrainLoader == true)?_c('b-container',[_c('b-button',{on:{\"click\":_vm.loadBrainFromSolid}},[_vm._v(\"Choose path for loading a brain\")]),_c('b-button',{on:{\"click\":_vm.hide}},[_vm._v(\"Hide BrainLoader\")]),(_vm.brains!=undefined)?_c('b-list-group',{staticClass:\"scroll\"},_vm._l((_vm.items),function(b){return _c('b-list-group-item',{key:b.id,staticClass:\"item list-group-item d-flex justify-content-between p-1\",attrs:{\"button\":\"\"},on:{\"click\":function($event){return _vm.loadBrain(b)}}},[_c('p',{staticClass:\"p-0 m-0 flex-grow-1\"},[_c('b',[_vm._v(_vm._s(b.name))])]),_c('small',{staticClass:\"mr-2\"},[_c('i',[_vm._v(\"created: \"+_vm._s(new Date(b.created).toLocaleString())+\" \"),_c('br'),_vm._v(\" updated: \"+_vm._s(new Date(b.updated).toLocaleString()))])]),_c('b-button',{attrs:{\"size\":\"sm mr-2\",\"variant\":\"outline-success\"},on:{\"click\":function($event){$event.stopPropagation();return _vm.open(b.id)}}},[_c('b-icon-eye')],1),_c('b-button',{attrs:{\"size\":\"sm mr-2\",\"variant\":\"outline-success\"},on:{\"click\":function($event){$event.stopPropagation();return _vm.share(b.id)}}},[_c('b-icon-share')],1)],1)}),1):_vm._e(),_c('PodBrowser')],1):_vm._e()}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <b-container v-if=\"showBrainLoader == true\">\r\n    <b-button @click=\"loadBrainFromSolid\">Choose path for loading a brain</b-button>\r\n    <b-button @click=\"hide\">Hide BrainLoader</b-button>\r\n    <!-- <b-button @click=\"createBrain\">Create Brain</b-button> -->\r\n    <b-list-group v-if=\"brains!=undefined\" class=\"scroll\">\r\n      <b-list-group-item\r\n      v-for=\"b in items\"\r\n      :key=\"b.id\"\r\n      @click=\"loadBrain(b)\"\r\n      class=\"item list-group-item d-flex justify-content-between p-1\"\r\n      button>\r\n      <p class=\"p-0 m-0 flex-grow-1\">\r\n        <b>{{b.name}}</b>\r\n      </p>\r\n      <small class=\"mr-2\"><i>created: {{new Date(b.created).toLocaleString()}} <br> updated: {{new Date(b.updated).toLocaleString()}}</i></small>\r\n\r\n      <!-- <a :href=\"b.id\" target=\"_blank\" button  size=\"sm mr-2\" variant=\"outline-success\"><b-icon-link></b-icon-link></a> -->\r\n      <b-button @click.stop=\"open(b.id)\" size=\"sm mr-2\" variant=\"outline-success\"><b-icon-eye></b-icon-eye></b-button>\r\n      <b-button @click.stop=\"share(b.id)\"  size=\"sm mr-2\" variant=\"outline-success\"><b-icon-share></b-icon-share></b-button>\r\n\r\n\r\n      <!-- <b-icon-share @click=\"share(b.id)\"></b-icon-share> -->\r\n    </b-list-group-item>\r\n  </b-list-group>\r\n  <PodBrowser />\r\n</b-container>\r\n</template>\r\n\r\n<script>\r\nimport ToastMixin from '@/mixins/ToastMixin'\r\n\r\nexport default {\r\n  name: \"BrainLoader\",\r\n  components: {\r\n    'PodBrowser': ()=>import('@/views/PodBrowser'),\r\n    //   // 'DataCaching': ()=>import('@/views/experiments/DataCaching'),\r\n    //   // 'LevelgraphJsonld': ()=>import('@/views/experiments/LevelgraphJsonld'),\r\n  },\r\n  mixins: [ToastMixin],\r\n  data(){\r\n    return{\r\n      items: []\r\n    }\r\n  },\r\n  methods:{\r\n    loadBrain(b){\r\n      console.log(\"loading\",b)\r\n      this.$loadBrainFromSolid(b.id)\r\n      this.hide()\r\n    },\r\n    loadBrainFromSolid(){\r\n      this.$loadBrainFromSolid()\r\n      this.hide()\r\n    },\r\n    hide(){\r\n      this.$store.commit('core/setShowBrainLoader', false)\r\n    },\r\n    share(id){\r\n      let copyText = \"https://scenaristeur.github.io/agent?source=\"+id //window.location.href\r\n      let app = this\r\n      //  !copyText.endsWith(\".ttl\") ?\r\n      //copyText = copyText+this.file.url //: \"\"\r\n      //  console.log(copyText)\r\n      navigator.clipboard.writeText(copyText).then(function() {\r\n        /* clipboard successfully set */\r\n        //  console.log(\"clipok\", copyText)\r\n        app.makeToast(\"The url is in your clipboard ;-)\", copyText+\".               Use Ctrl+V to share it\", \"success\")\r\n      }, function() {\r\n        /* clipboard write failed */\r\n        //  console.log(\"clipERROR\", copyText)\r\n        app.makeToast(\"Houston, we've got a problem with the clipboard ;-(\", copyText, \"warning\")\r\n      })\r\n    },\r\n    open(id){\r\n      window.open(id, '_blank').focus();\r\n    },\r\n    // createBrain(){\r\n    //   this.$brain_create()\r\n    // }\r\n  },\r\n  watch:{\r\n    brains(){\r\n      this.items = this.brains.brains.sort((a,b) => b.updated - a.updated);\r\n    }\r\n  },\r\n  computed: {\r\n    brains() {\r\n      return this.$store.state.core.brains\r\n    },\r\n    showBrainLoader() {\r\n      return this.$store.state.core.showBrainLoader\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style>\r\n.item {\r\n  text-align: left;\r\n}\r\n.scroll{\r\n  max-height: 30vh;\r\n  margin-bottom: 10px;\r\n  overflow-y:scroll;\r\n  -webkit-overflow-scrolling: touch;\r\n}\r\n</style>\r\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./BrainLoader.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./BrainLoader.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./BrainLoader.vue?vue&type=template&id=40c558e5&\"\nimport script from \"./BrainLoader.vue?vue&type=script&lang=js&\"\nexport * from \"./BrainLoader.vue?vue&type=script&lang=js&\"\nimport style0 from \"./BrainLoader.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","export default {\r\n  methods: {\r\n    makeToast(title, content, variant = null) {\r\n      this.$bvToast.toast(content , {\r\n        title: title,\r\n        variant: variant,\r\n        solid: true\r\n      })\r\n    }\r\n  }\r\n}\r\n"],"names":["render","_vm","this","_h","$createElement","_c","_self","showBrainLoader","on","loadBrainFromSolid","_v","hide","undefined","brains","staticClass","_l","b","key","id","attrs","$event","loadBrain","_s","name","Date","created","toLocaleString","updated","stopPropagation","open","share","_e","staticRenderFns","components","mixins","data","items","methods","console","navigator","app","window","watch","computed","component","makeToast","title","content","variant","$bvToast","toast","solid"],"sourceRoot":""}