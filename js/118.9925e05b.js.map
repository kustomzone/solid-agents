{"version":3,"file":"js/118.9925e05b.js","mappings":"sJAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACA,EAAG,UAAU,CAACE,MAAM,CAAC,aAAeN,EAAIO,eAAeP,EAAIQ,GAAIR,EAAQ,MAAE,SAASS,EAAKC,GAAK,OAAON,EAAG,WAAW,CAACO,IAAID,EAAIJ,MAAM,CAAC,IAAMI,EAAI,MAAQD,EAAKG,MAAM,MAAQH,EAAKI,MAAM,KAAOJ,EAAKK,MAAMC,GAAG,CAAC,UAAYf,EAAIgB,gBAAe,GAAGZ,EAAG,QAAQ,CAACa,IAAI,WAAWC,YAAY,CAAC,QAAU,QAAQZ,MAAM,CAAC,KAAO,OAAO,SAAW,YAAYS,GAAG,CAAC,OAASf,EAAImB,iBAAiB,IACvdC,EAAkB,GCkBtB,GACAC,KAAAA,UACAC,WAAAA,GAGAC,OACA,OACAC,MAAAA,GACAC,KAAAA,CACA,CACAX,KAAAA,aACAF,MAAAA,gBACAC,MAAAA,WAEA,CACAC,KAAAA,sBACAF,MAAAA,cACAC,MAAAA,WAEA,CACAC,KAAAA,MACAF,MAAAA,kBACAC,MAAAA,WAEA,CACAC,KAAAA,WACAF,MAAAA,WACAC,MAAAA,YAGAN,aAAAA,YAGAmB,QAAAA,CACAV,UAAAA,SAAAA,GACA,cACA,OACA,qCACA,MACA,OACA,4BACA,MACA,OACA,4CACA,MACA,OACA,8CACA,MACA,QACAW,OAAAA,MAAAA,EAAAA,OAGA,qBACAC,QAAAA,IAAAA,KAAAA,OACA,WACA,sDAIA,OAHAA,QAAAA,IAAAA,GAEAC,EAAAA,YAAAA,CAAAC,GAAAA,WAAAA,EAAAA,OACA,2BACA,uBACAC,EAAAA,cAAAA,GACAA,EAAAA,OAAAA,iBAEAC,EAAAA,aAAAA,EAAAA,OACAJ,QAAAA,IAAAA,GACA,gCAGA,qCACAC,EAAAA,eAAAA,CAAAC,GAAAA,WAAAA,EAAAA,OAEAG,EAAAA,IAEAF,EAAAA,QAAAA,SAAAA,GACAH,QAAAA,IAAAA,UAAAA,GACAM,EAAAA,UAMA,2BACAN,QAAAA,IAAAA,GACA,oBACA,sCACAA,QAAAA,IAAAA,EAAAA,GAAAA,IACA,cAEA,wDACA,6CAkCAT,eAGA,uCAGAgB,MAAAA,CACAX,QACA,qBACA,uBCxJmQ,I,UCO/PY,GAAY,OACd,EACArC,EACAqB,GACA,EACA,KACA,KACA,MAIF,EAAegB,EAAiB","sources":["webpack://agent/./src/views/FabMenu.vue?d768","webpack://agent/src/views/FabMenu.vue","webpack://agent/./src/views/FabMenu.vue?de4c","webpack://agent/./src/views/FabMenu.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('vue-fab',{attrs:{\"mainBtnColor\":_vm.mainBtnColor}},_vm._l((_vm.menu),function(item,idx){return _c('fab-item',{key:idx,attrs:{\"idx\":idx,\"title\":item.title,\"color\":item.color,\"icon\":item.icon},on:{\"clickItem\":_vm.clickItem}})}),1),_c('input',{ref:\"uploader\",staticStyle:{\"display\":\"none\"},attrs:{\"type\":\"file\",\"multiple\":\"multiple\"},on:{\"change\":_vm.inputChanged}})],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div>\r\n    <vue-fab\r\n    :mainBtnColor=\"mainBtnColor\">\r\n    <fab-item\r\n    v-for=\"(item, idx) in menu\"\r\n    :key=\"idx\"\r\n    :idx=\"idx\"\r\n    :title=\"item.title\"\r\n    :color=\"item.color\"\r\n    :icon=\"item.icon\"\r\n    @clickItem=\"clickItem\" />\r\n  </vue-fab>\r\n  <!-- <UploadFile ref=\"uploadfile\" /> -->\r\n  <input type=\"file\" ref=\"uploader\" style=\"display: none\"  multiple=\"multiple\" @change=\"inputChanged\">\r\n</div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"FabMenu\",\r\n  components: {\r\n    // 'UploadFile': ()=>import('@/views/UploadFile'),\r\n  },\r\n  data(){\r\n    return {\r\n      files: [],\r\n      menu: [\r\n        {\r\n          icon: 'psychology',\r\n          title: 'Add a neurone',\r\n          color: '#9900ff'\r\n        },\r\n        {\r\n          icon: 'add_photo_alternate',\r\n          title: 'Add a media',\r\n          color: '#ff9900'\r\n        },\r\n        {\r\n          icon: 'toc',\r\n          title: 'External source',\r\n          color: '#ff0099'\r\n        },\r\n        {\r\n          icon: 'terminal',\r\n          title: 'Terminal',\r\n          color: '#999999'\r\n        }\r\n      ],\r\n      mainBtnColor: '#3eaf7c'\r\n    }\r\n  },\r\n  methods:{\r\n    clickItem: function (item) {\r\n      switch (item.idx) {\r\n        case 0:\r\n        this.$store.dispatch('core/newNode')\r\n        break;\r\n        case 1:\r\n        this.$refs.uploader.click()\r\n        break;\r\n        case 2:\r\n        this.$bvModal.show(\"modal-external-source\")\r\n        break;\r\n        case 3:\r\n        this.$store.commit('terminal/toggleTerminal')\r\n        break;\r\n        default:\r\n        window.alert(item.idx)\r\n      }\r\n    },\r\n    async processFiles(){\r\n      console.log(this.files)\r\n      let app = this\r\n      const filePromises = Array.from(this.files).map(async function(f) {\r\n        console.log(f)\r\n        // Return a promise per file\r\n        app.$spinnerAdd({id: \"loading \"+f.name})\r\n        return new Promise( function(resolve, reject) {\r\n          const reader = new FileReader();\r\n          reader.readAsDataURL(f);\r\n          reader.onload = async function () {\r\n            //let base64 = reader.result\r\n            f.base64 = await reader.result\r\n            console.log(f)\r\n            let node = await app.$newNode(f)\r\n            //  console.log(reader.result);//base64encoded string\r\n\r\n            await app.$store.dispatch('core/saveNode', node)\r\n            app.$spinnerRemove({id: \"loading \"+f.name})\r\n\r\n            resolve(node)\r\n          };\r\n          reader.onerror = function (error) {\r\n            console.log('Error: ', error);\r\n            reject(error)\r\n          };\r\n        });\r\n      });\r\n\r\n      // Wait for all promises to be resolved\r\n      let medias =   await Promise.all(filePromises);\r\n      console.log(medias)\r\n      this.files = []\r\n      await this.$store.dispatch('core/getNodes')\r\n      console.log(medias[0].id)\r\n      let id = medias[0].id\r\n\r\n      let n = await this.$store.state.core.nodes.find(n => n.id == id)\r\n            this.$store.commit ('core/setCurrentNode', n)\r\n\r\n\r\n// let node = await this.$store.state.core.graph.graphData().nodes.find(n => n.id == id)\r\n// console.log(n, node)\r\n//       const distance = 40;\r\n//       let pos = {x: distance, y: distance, z: distance}\r\n//       // if(node.x != 0 && node.y != 0 && node.z != 0){\r\n//       //   console.log(pos, node.x, node.y, node.z)\r\n//       //   const distRatio = 1 + distance/Math.hypot(node.x, node.y, node.z);\r\n//       //   console.log(distRatio)\r\n//       //   pos = { x: node.x * distRatio, y: node.y * distRatio, z: node.z * distRatio }\r\n//       //   console.log(pos)\r\n//       // }\r\n//       console.log(pos)\r\n//       this.$store.state.core.graph.cameraPosition(\r\n//         pos, // new position\r\n//         node, // lookAt ({ x, y, z })\r\n//         3000  // ms transition duration\r\n//       );\r\n      // console.log(store.state.core.graph)\r\n      //  let n = store.state.core.nodes.find(n => n.id == node.id)\r\n\r\n\r\n\r\n\r\n\r\n      // console.log(n)\r\n      // this.$store.commit('core/setCurrentNode', n)\r\n      // console.log(this.$store.state.core.graph)//.onNodeClick(n)\r\n      //  this.$store.state.core.graph.zoomToFit(0,10,n => n.id = id)\r\n\r\n\r\n    },\r\n    inputChanged(){\r\n      // console.log(e)\r\n      // console.log(this.$refs.uploader)\r\n      this.files = this.$refs.uploader.files\r\n    }\r\n  },\r\n  watch:{\r\n    files(){\r\n      if (this.files.length > 0){\r\n        this.processFiles()\r\n      }\r\n    }\r\n  },\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n</style>\r\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./FabMenu.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./FabMenu.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./FabMenu.vue?vue&type=template&id=0bf7bcec&\"\nimport script from \"./FabMenu.vue?vue&type=script&lang=js&\"\nexport * from \"./FabMenu.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","mainBtnColor","_l","item","idx","key","title","color","icon","on","clickItem","ref","staticStyle","inputChanged","staticRenderFns","name","components","data","files","menu","methods","window","console","app","id","reader","f","resolve","reject","watch","component"],"sourceRoot":""}