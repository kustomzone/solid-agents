{"version":3,"file":"js/118-legacy.e7c6bc2d.js","mappings":"uJAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACA,EAAG,UAAU,CAACE,MAAM,CAAC,aAAeN,EAAIO,eAAeP,EAAIQ,GAAIR,EAAQ,MAAE,SAASS,EAAKC,GAAK,OAAON,EAAG,WAAW,CAACO,IAAID,EAAIJ,MAAM,CAAC,IAAMI,EAAI,MAAQD,EAAKG,MAAM,MAAQH,EAAKI,MAAM,KAAOJ,EAAKK,MAAMC,GAAG,CAAC,UAAYf,EAAIgB,gBAAe,GAAGZ,EAAG,QAAQ,CAACa,IAAI,WAAWC,YAAY,CAAC,QAAU,QAAQZ,MAAM,CAAC,KAAO,OAAO,SAAW,YAAYS,GAAG,CAAC,OAASf,EAAImB,iBAAiB,IACvdC,EAAkB,G,WCkBtB,G,wEAAA,CACAC,KAAAA,UACAC,WAAAA,GAGAC,KALA,WAMA,OACAC,MAAAA,GACAC,KAAAA,CACA,CACAX,KAAAA,aACAF,MAAAA,gBACAC,MAAAA,WAEA,CACAC,KAAAA,sBACAF,MAAAA,cACAC,MAAAA,WAEA,CACAC,KAAAA,MACAF,MAAAA,kBACAC,MAAAA,WAEA,CACAC,KAAAA,WACAF,MAAAA,WACAC,MAAAA,YAGAN,aAAAA,YAGAmB,QAAAA,CACAV,UAAAA,SAAAA,GACA,cACA,OACA,qCACA,MACA,OACA,4BACA,MACA,OACA,4CACA,MACA,OACA,8CACA,MACA,QACAW,OAAAA,MAAAA,EAAAA,OAGAC,aAnBA,WAmBA,qKACAC,QAAAA,IAAAA,EAAAA,OACAC,EAAA,EACAC,EAAAC,MAAAA,KAAAA,EAAAA,OAAAA,IAAAA,WAAA,6IACAH,QAAAA,IAAAA,GAEAC,EAAAA,YAAAA,CAAAG,GAAAA,WAAAA,EAAAA,OAHA,kBAIA,2BACA,qBACAC,EAAAA,cAAAA,GACAA,EAAAA,QAAAA,EAAAA,EAAAA,GAAAA,mBAAAA,MAAAA,SAAAA,IAAA,uGAEAA,EAAAA,OAFA,cAEAC,EAAAA,OAFA,OAGAN,QAAAA,IAAAA,GAHA,SAIAC,EAAAA,SAAAA,GAJA,cAIAM,EAJA,gBAOAN,EAAAA,OAAAA,SAAAA,gBAAAA,GAPA,OAQAA,EAAAA,eAAAA,CAAAG,GAAAA,WAAAA,EAAAA,OAEAI,EAAAA,GAVA,4CAYAH,EAAAA,QAAAA,SAAAA,GACAL,QAAAA,IAAAA,UAAAA,GACAS,EAAAA,QArBA,8FAAAN,IAHA,SA8BAO,QAAAA,IAAAA,GA9BA,cA8BAC,EA9BA,OA+BAX,QAAAA,IAAAA,GACA,WAhCA,UAiCA,mCAjCA,eAkCAA,QAAAA,IAAAA,EAAAA,GAAAA,IACAI,EAAAO,EAAAA,GAAAA,GAnCA,UAqCA,8DArCA,QAqCAC,EArCA,OAsCA,yCAtCA,+CAwEAtB,aA3FA,WA8FA,uCAGAuB,MAAAA,CACAlB,MADA,WAEA,qBACA,wBCxJmQ,I,UCO/PmB,GAAY,OACd,EACA5C,EACAqB,GACA,EACA,KACA,KACA,MAIF,EAAeuB,EAAiB","sources":["webpack://agent/./src/views/FabMenu.vue?d768","webpack://agent/src/views/FabMenu.vue","webpack://agent/./src/views/FabMenu.vue?de4c","webpack://agent/./src/views/FabMenu.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('vue-fab',{attrs:{\"mainBtnColor\":_vm.mainBtnColor}},_vm._l((_vm.menu),function(item,idx){return _c('fab-item',{key:idx,attrs:{\"idx\":idx,\"title\":item.title,\"color\":item.color,\"icon\":item.icon},on:{\"clickItem\":_vm.clickItem}})}),1),_c('input',{ref:\"uploader\",staticStyle:{\"display\":\"none\"},attrs:{\"type\":\"file\",\"multiple\":\"multiple\"},on:{\"change\":_vm.inputChanged}})],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div>\n    <vue-fab\n    :mainBtnColor=\"mainBtnColor\">\n    <fab-item\n    v-for=\"(item, idx) in menu\"\n    :key=\"idx\"\n    :idx=\"idx\"\n    :title=\"item.title\"\n    :color=\"item.color\"\n    :icon=\"item.icon\"\n    @clickItem=\"clickItem\" />\n  </vue-fab>\n  <!-- <UploadFile ref=\"uploadfile\" /> -->\n  <input type=\"file\" ref=\"uploader\" style=\"display: none\"  multiple=\"multiple\" @change=\"inputChanged\">\n</div>\n</template>\n\n<script>\nexport default {\n  name: \"FabMenu\",\n  components: {\n    // 'UploadFile': ()=>import('@/views/UploadFile'),\n  },\n  data(){\n    return {\n      files: [],\n      menu: [\n        {\n          icon: 'psychology',\n          title: 'Add a neurone',\n          color: '#9900ff'\n        },\n        {\n          icon: 'add_photo_alternate',\n          title: 'Add a media',\n          color: '#ff9900'\n        },\n        {\n          icon: 'toc',\n          title: 'External source',\n          color: '#ff0099'\n        },\n        {\n          icon: 'terminal',\n          title: 'Terminal',\n          color: '#999999'\n        }\n      ],\n      mainBtnColor: '#3eaf7c'\n    }\n  },\n  methods:{\n    clickItem: function (item) {\n      switch (item.idx) {\n        case 0:\n        this.$store.dispatch('core/newNode')\n        break;\n        case 1:\n        this.$refs.uploader.click()\n        break;\n        case 2:\n        this.$bvModal.show(\"modal-external-source\")\n        break;\n        case 3:\n        this.$store.commit('terminal/toggleTerminal')\n        break;\n        default:\n        window.alert(item.idx)\n      }\n    },\n    async processFiles(){\n      console.log(this.files)\n      let app = this\n      const filePromises = Array.from(this.files).map(async function(f) {\n        console.log(f)\n        // Return a promise per file\n        app.$spinnerAdd({id: \"loading \"+f.name})\n        return new Promise( function(resolve, reject) {\n          const reader = new FileReader();\n          reader.readAsDataURL(f);\n          reader.onload = async function () {\n            //let base64 = reader.result\n            f.base64 = await reader.result\n            console.log(f)\n            let node = await app.$newNode(f)\n            //  console.log(reader.result);//base64encoded string\n\n            await app.$store.dispatch('core/saveNode', node)\n            app.$spinnerRemove({id: \"loading \"+f.name})\n\n            resolve(node)\n          };\n          reader.onerror = function (error) {\n            console.log('Error: ', error);\n            reject(error)\n          };\n        });\n      });\n\n      // Wait for all promises to be resolved\n      let medias =   await Promise.all(filePromises);\n      console.log(medias)\n      this.files = []\n      await this.$store.dispatch('core/getNodes')\n      console.log(medias[0].id)\n      let id = medias[0].id\n\n      let n = await this.$store.state.core.nodes.find(n => n.id == id)\n            this.$store.commit ('core/setCurrentNode', n)\n\n\n// let node = await this.$store.state.core.graph.graphData().nodes.find(n => n.id == id)\n// console.log(n, node)\n//       const distance = 40;\n//       let pos = {x: distance, y: distance, z: distance}\n//       // if(node.x != 0 && node.y != 0 && node.z != 0){\n//       //   console.log(pos, node.x, node.y, node.z)\n//       //   const distRatio = 1 + distance/Math.hypot(node.x, node.y, node.z);\n//       //   console.log(distRatio)\n//       //   pos = { x: node.x * distRatio, y: node.y * distRatio, z: node.z * distRatio }\n//       //   console.log(pos)\n//       // }\n//       console.log(pos)\n//       this.$store.state.core.graph.cameraPosition(\n//         pos, // new position\n//         node, // lookAt ({ x, y, z })\n//         3000  // ms transition duration\n//       );\n      // console.log(store.state.core.graph)\n      //  let n = store.state.core.nodes.find(n => n.id == node.id)\n\n\n\n\n\n      // console.log(n)\n      // this.$store.commit('core/setCurrentNode', n)\n      // console.log(this.$store.state.core.graph)//.onNodeClick(n)\n      //  this.$store.state.core.graph.zoomToFit(0,10,n => n.id = id)\n\n\n    },\n    inputChanged(){\n      // console.log(e)\n      // console.log(this.$refs.uploader)\n      this.files = this.$refs.uploader.files\n    }\n  },\n  watch:{\n    files(){\n      if (this.files.length > 0){\n        this.processFiles()\n      }\n    }\n  },\n\n\n\n\n\n\n}\n</script>\n\n<style>\n\n</style>\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./FabMenu.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./FabMenu.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./FabMenu.vue?vue&type=template&id=0bf7bcec&\"\nimport script from \"./FabMenu.vue?vue&type=script&lang=js&\"\nexport * from \"./FabMenu.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","mainBtnColor","_l","item","idx","key","title","color","icon","on","clickItem","ref","staticStyle","inputChanged","staticRenderFns","name","components","data","files","menu","methods","window","processFiles","console","app","filePromises","Array","id","reader","f","node","resolve","reject","Promise","medias","n","watch","component"],"sourceRoot":""}