"use strict";(self["webpackChunkagent"]=self["webpackChunkagent"]||[]).push([[478],{7478:function(o,e,t){t.r(e),t.d(e,{default:function(){return d}});var i=function(){var o=this,e=o.$createElement,t=o._self._c||e;return t("div",[t("b-button",{on:{click:o.saveBrainToSolid}},[o._v("Save brain to Solid")]),t("b-button",{on:{click:o.loadBrainFromSolid}},[o._v("Load brain from Solid")]),t("b-button",{on:{click:o.clear}},[o._v("Clear")]),t("SolidLogin"),t("div",{ref:"graph",attrs:{id:"graph"}},[o._v("Loading graph... ")])],1)},s=[],n={name:"VisualisationView",components:{SolidLogin:()=>t.e(221).then(t.bind(t,4221))},data(){return{}},mounted(){this.$graphInit({domElement:this.$refs.graph}),this.$checkSolidSession()},methods:{saveBrain(){this.$store.dispatch("core/saveBrain")},saveBrainToSolid(){this.$saveBrainToSolid()},loadBrainFromSolid(){this.$loadBrainFromSolid()},clear(){confirm("Are you sure you want to remove all nodes?")&&(this.$store.dispatch("core/removeAllNodes"),this.$store.commit("core/setCurrentNode",null))},update(){if(console.log(this.nodes),void 0!=this.graph){let o=this.nodes.map((o=>({...o}))),e=this.links.map((o=>({...o})));this.graph.graphData({nodes:o,links:e}),console.log(this.nodes)}}},watch:{nodes(){console.log(this.nodes),this.update()},links(){console.log(this.links),this.update()},graph(){this.update()}},computed:{nodes(){return this.$store.state.core.nodes},links(){return this.$store.state.core.links},graph(){return this.$store.state.core.graph}}},r=n,a=t(1001),l=(0,a.Z)(r,i,s,!1,null,null,null),d=l.exports}}]);
//# sourceMappingURL=478.065f8162.js.map